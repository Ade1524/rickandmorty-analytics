{{
    config(
        materialized='ephemeral'
    )
}}


WITH unnested_episodes AS (
    -- 1. Unnest the episode_urls column based on the pipe (|) delimiter
    SELECT
        c.character_id,
        c.character_name,
        -- SPLIT_TO_TABLE splits the VARCHAR column by '|' and unpivots it into rows.
        -- 'value' is the column name generated by SPLIT_TO_TABLE containing the unnested URL.
        t.value::varchar AS episode_url_full
    FROM 
        {{ ref('stg_characters') }} AS c,
        TABLE(SPLIT_TO_TABLE(c.episodes_feature, '|')) AS t -- Use '|' as the delimiter
    WHERE
        -- Filter out any empty strings that might result from extra delimiters (e.g., 'url1||url2')
        t.value IS NOT NULL AND TRIM(t.value) != ''
),

final_unnesting AS (
    -- 2. Extract the Episode ID from the URL string
    SELECT
        character_id,
        character_name,
        episode_url_full,
        -- Extract the ID by splitting the URL string on the '/' delimiter
        -- The ID is the last part of the URL (e.g., from '.../episode/10', it extracts '10')
        SPLIT_PART(episode_url_full, '/', -1)::integer AS episode_id_join_key
    FROM
        unnested_episodes
)

SELECT * FROM final_unnesting
